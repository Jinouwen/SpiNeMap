/*!

\page ch9_matlab_oat Chapter 9: MATLAB Offline Analysis Toolbox (OAT)
\tableofcontents

In addition to the real-time monitors (see \ref ch7_monitoring), CARLsim provides a versatile Offline Analysis
Toolbox (OAT) written in MATLAB for the visualization and analysis of neuronal, synaptic, and network information.

The OAT is built to work straight out of the box, by operating on binary files that the CARLsim simulation creates
by default.
The easiest way to visualize network activity is to run a NetworkMonitor (see \ref ch9s2_network_monitor).
However, it is also possible to look at specific groups (see \ref ch9s3_group_monitor) 
or connections (see \ref ch9s4_connection_monitor), and to access the associated spike file binaries
(see \ref ch9s5s2_spike_reader) and weight file binaries (see \ref ch9s5s3_connection_reader) directly.

Every Monitor comes with an InteractiveMode for plotting activity and weights over time,
which allows the use of keyboard commands to step through frames, pause or quit
(see \ref ch9s2s3_plot, \ref ch9s3s3_plot, and \ref ch9s4s3_plot).

Every Monitor also provides a whole range of settings to customize the plotting
(see \ref ch9s2s5_plot_attributes, \ref ch9s3s5_plot_attributes, and \ref ch9s4s5_plot_attributes)
or recording
(see \ref ch9s2s7_record_attributes, \ref ch9s3s7_record_attributes, or \ref ch9s4s7_record_attributes)
of activity and weights.

For users migrating from CARLsim 2.2, please note that <tt>readNetwork.m</tt> has been replaced with 
NetworkMonitors (see \ref ch9s2_network_monitor) and <tt>readSpikes.m</tt> has been replaced with
Spike Readers (see \ref ch9s5s2_spike_reader).
For more information please refer to \ref ch9s6_migrating_scripts.


\section ch9s1_getting_started 9.1 Getting Started
\author Michael Beyeler

Before the OAT can be used, the directory "tools/offline_analysis_toolbox" must be added to the MATLAB path.

The "Hello World" project (see \ref ch1s3_project_workflow) provides a short MATLAB script for this
in the <tt>scripts</tt> subdirectory:
\code
>> initOAT     % adds OAT relative path to MATLAB paths
\endcode

Alternatively, the path can be added manually, making changes either permanent by using the MATLAB path tool:
\code
>> pathtool
\endcode
and selecting the directory <tt>%%%CARLSIM_ROOT_DIR%%/tools/offline_analysis_toolbox</tt>,
or just for the current session by explicitly running:
\code
>> addpath "%%CARLSIM_ROOT_DIR%%/tools/offline_analysis_toolbox"
\endcode

Now it should be possible to display the code documentation for different classes by using MATLAB's help browser:
\code
>> doc NetworkMonitor       % open help browser for NetworkMonitor class
\endcode



\section ch9s2_network_monitor 9.2 NetworkMonitor
\author Michael Beyeler

A NetworkMonitor can be used to monitor properties as well as the activity of a number of neuronal groups
in a network.
The monitor will parse a simulation file of the form <tt>sim_{name of network}.dat</tt> that is automatically
generated by a CARLsim simulation, determine the network structure (such as number of groups and connections),
find all associated spike files, and plot group activity accordingly.

The following methods are available:
\code
>> methods NetworkMonitor

addAllGroupsFromFile      % registers all groups specified in the simulation file
addGroup                  % registers a specific group
getError                  % returns the current error status (flag and message)
getGroupGrid3D            % returns the Grid3D dimensions of a group
getGroupNumNeurons        % returns the number of neurons in a group
plot                      % plots data in current figure/axes
recordMovie               % records data from current figure/axes to AVI movie file
setErrorMode              % set error mode ('standard', 'warning', 'silent')
setGroupGrid3D            % set the Grid3D dimensions of a group (for plotting and recording)
setGroupPlotType          % set default plot type of a group (raster plot, flow field, etc.)
setGroupSubPlot           % sets the subplot in which to plot a group's activity
setPlottingAttributes     % settings for customizing the plotting process
setRecordingAttributes    % settings for customizing the recording process (to AVI file)
setSpikeFileAttributes    % set prefix/suffix of spike file naming template
\endcode

The following public members (properties) are available:
\code
>> properties NetworkMonitor

simObj                    % SimulationReader object
resultsFolder             % path to results folder
groupNames                % list of group names
groupSubPlots             % list of subplots for all groups
groupMonObj               % list of GroupMonitor objects for all groups
errorMode                 % current error mode
supportedErrorModes       % list of supported error modes
\endcode


\subsection ch9s2s1_create 9.2.1 Creating a NetworkMonitor

In order to open a NetworkMonitor, specify the path to a simulation file (of the form
<tt>sim_{network name}.dat</tt>) that has been created automatically during a CARLsim simulation,
or by explicitly calling CARLsim::saveSimulation:
\code
>> NM = NetworkMonitor('results/sim_random.dat')

NM =

                 simObj: [1x1 SimulationReader]
          resultsFolder: 'results'
             groupNames: {'excit'  'inhib'  'input'}
          groupSubPlots: {[1]  [2]  [3]}
            groupMonObj: {[1x1 GroupMonitor]  [1x1 GroupMonitor]  [1x1 GroupMonitor]}
              errorMode: 'standard'
    supportedErrorModes: {'standard'  'warning'  'silent'}
\endcode
The NetworkMonitor will use a SimulationReader (see \ref ch9s5s1_simulation_reader) to parse the
simulation file <tt>results/sim_random.dat</tt>,
and open a GroupMonitor (see \ref ch9s3_group_monitor) on each group that was specified therein.
The resulting NetworkMonitor object should contain a list of all groups in the network (see
public member <tt>groupNames</tt>) with associated GroupMonitor objects (see public member
<tt>groupMonObj</tt>) and associated subplots (see public member <tt>groupSubPlots</tt>).

In order to find the list of all associated groups, the NetworkMonitor constructor will implicitly
call the public method <tt>addAllGroupsFromFile</tt>.
Alternatively, the user can opt not to automatically add all groups from file, by setting input
argument <tt>loadGroupsFromFile</tt> to <tt>false</tt>:
\code
>> NM = NetworkMonitor('results/sim_random.dat', false) % loadGroupsFromFile

NM =
                 simObj: [1x1 SimulationReader]
          resultsFolder: 'results'
             groupNames: {}
          groupSubPlots: {}
            groupMonObj: {}
              errorMode: 'standard'
    supportedErrorModes: {'standard'  'warning'  'silent'}
\endcode
Groups to be included in a NetworkMonitor plot can then be added one-by-one via <tt>addGroup</tt>.
This allows to directly specify additional attributes such as plot type, Grid3D dimensions, which subplot
to occupy, etc.:
\code
>> NM.addGroup('input', 'heatmap', [10 10 1]); % name, plotType, grid3D
>> NM.addGroup('output', 'raster'); % name
\endcode
Note that the name strings must match the name the group was given during the CARLsim simulation, and the
Grid3D dimensions must add up to the correct total number of neurons in the group
\since v3.0


\subsection ch9s2s2_setspikefileattributes 9.2.2 Setting the Spike File Attributes

In case the spike files do not follow the default pattern, NetworkMonitor will not be able to locate the
spike files, which will be evident by an empty list of <tt>groupNames</tt>, <tt>groupSubPlots</tt>, and
<tt>groupMonObj</tt>:
\code
>> NM = NetworkMonitor('results/sim_random.dat', false) % loadGroupsFromFile

NM =

                 simObj: [1x1 SimulationReader]
          resultsFolder: 'results'
             groupNames: {}
          groupSubPlots: {}
            groupMonObj: {}
              errorMode: 'standard'
    supportedErrorModes: {'standard'  'warning'  'silent'}
\endcode
and trying to call the <tt>plot</tt> method will result in a warning:
\code
>> NM.plot
Warning: Nothing to plot. Try adding some groups first.
\endcode

In this case, the method <tt>setSpikeFileAttributes</tt> can be used to change the default prefix and suffix of
the spike file names.
By default, spike files follow the pattern <tt>spk_{group name}.dat</tt>, so the prefix would be <tt>spk_</tt>
and the suffix would be <tt>.dat</tt>, as dictated by the GroupMonitor object
(see \ref ch9s3s2_setspikefileattributes).
Analogously, for spike files following the naming convention <tt>spike_{group name}.ext</tt> the prefix would be 
<tt>spike_</tt> and the suffix would be <tt>.ext</tt>. After prefix/suffix have been set accordingly, the spike
file will be found and activity can be plotted:
\code
>> NM
                 simObj: [1x1 SimulationReader]
          resultsFolder: 'results'
             groupNames: {}
          groupSubPlots: {}
            groupMonObj: {}
              errorMode: 'standard'
    supportedErrorModes: {'standard'  'warning'  'silent'}

>> NM.setSpikeFileAttributes('spike_','.ext');
>> NM.addAllGroupsFromFile();
>> NM

NM =

                 simObj: [1x1 SimulationReader]
          resultsFolder: 'results'
             groupNames: {'excit'  'inhib'  'input'}
          groupSubPlots: {[1]  [2]  [3]}
            groupMonObj: {[1x1 GroupMonitor]  [1x1 GroupMonitor]  [1x1 GroupMonitor]}
              errorMode: 'standard'
    supportedErrorModes: {'standard'  'warning'  'silent'}
\endcode
\since v3.0


\subsection ch9s2s3_plot 9.2.3 Plotting Activity

Once a NetworkMonitor has been set up, activity can be plotted using the <tt>plot</tt> method:
\code
>> NM.plot
\endcode
This will plot the data in bins of 1000 ms in the current figure/axes, one group per subplot,
using a default plot type,
which is determined by the ::Grid3D dimensions of each group (see \ref ch9s2s4_plot_types
and \ref ch9s3s4_plot_types).
An example is shown in the figure below.

\image html 9_nm_example.jpg "Example NetworkMonitor plot with all raster plots."

A list of frames to be plotted as well as the histogram bin window (ms) can be specified directly.
For example, the following command would bin the data into frames 500 ms length, and display the
first, second, and eighth frame using default plot types for each group:
\code
>> NM.plot([1 2 8],500);
\endcode

The default plot type for each group can be changed via <tt>setGroupPlotType</tt>:
\code
>> NM.setGroupPlotType('excit','raster');  % plotting activity of group "excit" as raster plot
>> NM.setGroupPlotType('inhib','heatmap'); % plotting activity of group "inhib" as heat map
\endcode
Plot types are managed by the GroupMonitor object. 
For a list of available plot types, please refer to \ref ch9s2s4_plot_types.

Every Monitor comes with an InteractiveMode for plotting activity and weights.
By default, plotting will occur at a predefined speed (5 frames per second), unless otherwise specified using the
method <tt>setPlottingAttributes</tt> (see \ref ch9s2s5_plot_attributes).
At any time, the user can hit key 'p' to pause plotting, or 'q' to quit.
Hitting key 's' will enter stepping mode, which will freeze the current frame until the user either hits the
'right arrow' key (in order to step one frame forward) or the 'left arrow' key (in order to step one frame backward).

A number of additional plotting attributes can be set via <tt>setPlottingAttributes</tt>, such as the
background color of the figure and the number of frames to be displayed per second
(see \ref ch9s2s5_plot_attributes).

Certain plot types, such as <tt>'heatmap'</tt> or <tt>'flowfield'</tt> depend on appropriate ::Grid3D
dimensions (2D for the former, 3D for the latter).
For example, the heatmap of a population with 100 neurons on a 100x1x1 grid will be a single row.
But, the grid dimensions can be reshaped on-the-fly, to make them easier to visualize:
\code
>> NM.setGroupGrid3D('excit',10,10,1);   % reshape 100x1x1 grid into 10x10x1 grid
>> NM.setGroupPlotType('excit','heatmap');
\endcode
Note that the overall number of neurons must not change when specifying new grid dimensions.

Sometimes it is useful to manually assign subplots to each group, especially for groups whose 2D grid representations
are relatively wide or tall (e.g., 5x100 neurons).
In this case, <tt>setGroupSubPlots</tt> can be used to make a group plot span across multiple subplots:
\code
>> NM.setGroupGrid3D('excit', 5, 100, 1)    % 2D representation extremely wide
>> NM.setGroupSubPlot('excit', [1 2])       % make "excit" span two subplots
\endcode
By default, each group gets assigned just one subplot.
Make sure that each subplot is occupied by at most one group, otherwise the <tt>plot</tt> method will break.

The raw data of a spike file can also be read directly using a SpikeReader (see \ref ch9s5s2_spike_reader).
\see \ref ch9s2s4_plot_types
\see \ref ch9s2s5_plot_attributes
\see \ref ch9s5s2_spike_reader
\since v3.0


\subsection ch9s2s4_plot_types 9.2.4 NetworkMonitor Plot Types

NetworkMonitor follows the plot types that are specified and managed by GroupMonitor.
For a complete list of available plot types, please refer to \ref ch9s3s4_plot_types.

Plot types can be mixed-and-matched within a NetworkMonitor plot.
For example, a network containing three groups "excit", "inhib", and "input" might be visualized with
three different types:
\code
>> NM = NetworkMonitor('results/sim_random.dat')

NM =

                 simObj: [1x1 SimulationReader]
          resultsFolder: 'results'
             groupNames: {'excit'  'inhib'  'input'}
          groupSubPlots: {[1]  [2]  [3]}
            groupMonObj: {[1x1 GroupMonitor]  [1x1 GroupMonitor]  [1x1 GroupMonitor]}
              errorMode: 'standard'
    supportedErrorModes: {'standard'  'warning'  'silent'}

>> NM.setGroupPlotType('excit','histogram')  % plot "excit" as histogram
>> NM.setGroupPlotType('inhib','flowfield')  % plot "inhib" as flow field
>> NM.setGroupGrid3D('inhib', 20, 20, 4)     % make sure group "inhib" has the right dimensions
>> NM.setGroupPlotType('input','raster')     % plot "input" as raster plot
\endcode
The result of this code snippet is shown in the figure below.

\image html 9_nm_plottypes.jpg "Example NetworkMonitor plot with mixed plot types."

\note Make sure the Grid3D dimensions are appropriate for the current plot type (change dimensions via
<tt>setGrid3D</tt>).
\see \ref ch9s3s4_plot_types
\since v3.0


\subsection ch9s2s5_plot_attributes 9.2.5 NetworkMonitor Plotting Attributes

The method <tt>setPlottingAttributes(varargin)</tt> can be used to set default plotting attributes.
These default settings will apply to all activity plots, unless their values are overwritten explicitly in the
<tt>plot</tt> method (see \ref ch9s2s3_plot).

The following command sets the value of variable <tt>propertyName1</tt> to value <tt>value1</tt>:
\code
>> NM.setPlottingAttributes('propertyName1',value1);
\endcode
Additional variables can be flexibly appended; order or capitalization does not matter.
A list of available attributes can be displayed via:
\code
>> help NetworkMonitor.setPlottingAttributes

NM.setPlottingAttributes(varargin) can be used to set default
settings that will apply to all activity plots.
This function provides control over additional attributes
that are not available as input arguments to GM.plot or
NM.plotFrame.
NM.setPlottingAttributes('propertyName1',value1,...) sets the
value of 'propertyName1' to value1.
 
Calling the function without input arguments will restore the
default settings.

BGCOLOR        - Set background color for figure. Must be of
                 type ColorSpec (char such as 'w','b','k' or
                  a 3-element vector for RGB channels). The
                 default is white.
BINWINDOWMS    - The binning window (ms) in which the data
                 will be displayed. Default: 1000.
DISPFRAMENR    - A boolean flag that indicates whether to
                 display the frame number. Default: true.
FPS            - The frames per second for the plotting loop.
                 The default is 5.
BINWINDOWMS    - The binning window (ms) in which the data
                 will be displayed. Default: 1000.
\endcode
\since v3.0


\subsection ch9s3s6_record_movie 9.3.6 Recording a Movie

Activity plots can be directly saved to AVI movie files via the following command:
\code
>> NM.recordMovie;
\endcode

This will generate a default NetworkMonitor plot (see \ref ch9s2s3_plot) and save the frames to an <tt>.avi</tt>
binary using the MATLAB <tt>VideoWriter</tt> utility.

The following command will generate file called <tt>myMovie.avi</tt> that shows group activity with
default plot types, binning window 500 ms,
and display the first, second, and eighth frame at a playback rate of 1 fps:
\code
>> GM.recordMovie('myMovie.avi', [1 2 8], 500, 1);
created file "myMovie.avi"
\endcode
Plot types for each group can be set via <tt>setGroupPlotType</tt> (see \ref ch9s2s4_plot_types).

\note Make sure the Grid3D dimensions are appropriate for the current plot type (change dimensions via
<tt>setGrid3D</tt>).
\see \ref ch9s2s7_record_attributes
\since v3.0


\subsection ch9s2s7_record_attributes 9.2.7 NetworkMonitor Recording Attributes

The method <tt>setRecordingAttributes(varargin)</tt> can be used to set default recording attributes.
These default settings will apply to all recordings, unless their values are overwritten explicitly in the
<tt>recordMovie</tt> method (see \ref ch9s3s6_record_movie).

The following command sets the value of variable <tt>propertyName1</tt> to value <tt>value1</tt>:
\code
>> NM.setRecordingAttributes('propertyName1',value1);
\endcode
Additional variables can be flexibly appended; order or capitalization does not matter.
A list of available attributes can be displayed via:
\code
>> help NetworkMonitor.setRecordingAttributes

NM.setRecordingAttributes(varargin) can be used to set
default settings that will apply to all activity recordings.
This function provides control over additional attributes
that are not available as input arguments to GM.recordMovie.
GM.setRecordingAttributes('propertyName1',value1,...) sets
the value of 'propertyName1' to value1.
 
Calling the function without input arguments will restore the
default settings.
 
BGCOLOR        - Set background color for figure. Must be of
                 type ColorSpec (char such as 'w','b','k' or
                 a 3-element vector for RGB channels). The
                 default is white.
FILENAME       - File name where movie will be stored.
                 Currently the only supported file ending is
                 ".avi".
FPS            - The frames per second for the movie. The
                 default is 10.
WINSIZE        - A 2-element vector specifying the window
                 size of the video as width x height in
                 pixels.Set to [0 0] in order to
                 automatically make the movie window fit to
                 the size of the plot window.
\endcode
\since v3.0



\section ch9s3_group_monitor 9.3 GroupMonitor
\author Michael Beyeler

A GroupMonitor can be used to monitor properties as well as the activity of a specific neuronal group in a network.
The monitor will assume that a corresponding spike file was created via SpikeMonitor during the CARLsim simulation.

The following methods are available:
\code
>> methods GroupMonitor

getDefaultPlotType        % returns the default plot type for the group
getError                  % returns the current error status (flag and message)
getGrid3D                 % returns the Grid3D dimensions of the group
getNumNeurons             % returns the number of neurons in the group
getSimDurMs               % returns the estimated simulation duration (ms)
getSpikeFileName          % returns spike file name created from template
hasValidSpikeFile         % returns a flag whether valid spike file was found
plot                      % plots data in current figure/axes
recordMovie               % records data from current figure/axes to AVI movie file
setDefaultPlotType        % set default plot type of a group (raster plot, flow field, etc.)
setErrorMode              % set error mode ('standard', 'warning', 'silent')
setGrid3D                 % set the Grid3D dimensions of the group (for plotting and recording)
setPlottingAttributes     % settings for customizing the plotting process
setRecordingAttributes    % settings for customizing the recording process (to AVI file)
setSpikeFileAttributes    % set prefix/suffix of spike file naming template
\endcode

The following public members (properties) are available:
\code
>> properties GroupMonitor

name                      % name of the group
resultsFolder             % path to results folder
supportedErrorModes       % list of supported error modes
supportedPlotTypes        % list of supported plot types
\endcode


\subsection ch9s3s1_create 9.3.1 Creating a GroupMonitor

In order to open a GroupMonitor, specify the name of the group (given during a CARLsim simulation via
CARLsim::createGroup or CARLsim::createSpikeGeneratorGroup) and the directory in which the spike file resides
(<tt>results/</tt> by default):
\code
>> GM = GroupMonitor('excit','results/');

GM =

  GroupMonitor with properties:

                   name: 'excit'
          resultsFolder: 'results/'
              errorMode: []
    supportedErrorModes: {'standard'  'warning'  'silent'}
     supportedPlotTypes: {'flowfield'  'heatmap'  'histogram'  'raster'}
\endcode
By default, this will look for a spike file named <tt>spk_{group name}.dat</tt> in the <tt>results/</tt> directory,
which is the default name pattern for spike files created with CARLsim::setSpikeMonitor.
\since v3.0


\subsection ch9s3s2_setspikefileattributes 9.3.2 Setting the Spike File Attributes

In case the spike file does not follow the default pattern, creating a GroupMonitor will result in the following
warning:
\code
>> GM = GroupMonitor('excit','results/');
Warning: Could not find valid spike file "results/spk_excit.dat". Use setSpikeFileAttributes to
set a proper spike file prefix/suffix
\endcode
and trying to call the plot method will result in an error message:
\code
>> GM.plot
Error using GroupMonitor/throwError (line 1133)
Could not open file "results/spk_excit.dat" with read permission
\endcode

In this case, the method <tt>setSpikeFileAttributes</tt> can be used to change the default prefix and suffix of
the spike file name. In the above case, the prefix would be <tt>spk_</tt> and the suffix would be <tt>.dat</tt>.
Analogously, for a spike file following the naming convention <tt>spike_{group name}.ext</tt> the prefix would be 
<tt>spike_</tt> and the suffix would be <tt>.ext</tt>. After prefix/suffix have been set accordingly, the spike
file will be found and activity can be plotted:
\code
>> GM.hasValidSpikeFile()

ans =

     0

>> GM.setSpikeFileAttributes('spike_','.ext');
>> GM.hasValidSpikeFile()

ans =

     1

>> GM.plot
\endcode
\since v3.0


\subsection ch9s3s3_plot 9.3.3 Plotting Activity

Once a GroupMonitor has been set up, activity can be plotted using the <tt>plot</tt> method:
\code
>> GM.plot
\endcode
This will plot the data in bins of 1000 ms in the current figure/axes using a default plot type,
which is determined by the ::Grid3D dimensions of the group (see \ref ch9s3s4_plot_types).

A list of frames to be plotted as well as the histogram bin window (ms) can be specified directly.
For example, the following command would bin the data into frames 500 ms length, and display the
first, second, and eighth frame as a heat map:
\code
>> GM.plot('heatmap',[1 2 8],500);
\endcode

Every Monitor comes with an InteractiveMode for plotting activity and weights.
By default, plotting will occur at a predefined speed (5 frames per second), unless otherwise specified using the
method <tt>setPlottingAttributes</tt> (see \ref ch9s3s5_plot_attributes).
At any time, the user can hit key 'p' to pause plotting, or 'q' to quit.
Hitting key 's' will enter stepping mode, which will freeze the current frame until the user either hits the
'right arrow' key (in order to step one frame forward) or the 'left arrow' key (in order to step one frame backward).

It is also possible to set the default plot type directly, so it does not have to be specified each
time data is plotted or recorded:
\code
>> GM.setDefaultPlotType('histogram')
\endcode
For a list of available plot types, please refer to \ref ch9s3s4_plot_types.

A number of additional plotting attributes can be set via <tt>setPlottingAttributes</tt>, such as the
background color of the figure and the number of frames to be displayed per second
(see \ref ch9s3s5_plot_attributes).

Certain plot types, such as <tt>'heatmap'</tt> or <tt>'flowfield'</tt> depend on appropriate ::Grid3D
dimensions (2D for the former, 3D for the latter).
For example, the heatmap of a population with 100 neurons on a 100x1x1 grid will be a single row.
But, the grid dimensions can be reshaped on-the-fly, to make them easier to visualize:
\code
>> GM.setGrid3D(10,10,1);   % reshape 100x1x1 grid into 10x10x1 grid
>> GM.plot('heatmap')
\endcode
Note that the overall number of neurons must not change when specifying new grid dimensions.

The raw data of a spike file can also be read directly using a SpikeReader (see \ref ch9s5s2_spike_reader).
\see \ref ch9s3s4_plot_types
\see \ref ch9s3s5_plot_attributes
\see \ref ch9s5s2_spike_reader
\since v3.0


\subsection ch9s3s4_plot_types 9.3.4 GroupMonitor Plot Types

The following image illustrates the different plot types that are available (applied to an arbitrary network):

\image html 9_gm_plottypes.jpg "Supported GroupMonitor plot types: 'raster', 'heatmap', 'histogram', and 'flowfield'."

A specific default plot type can be set using <tt>setDefaultPlotType</tt>:
\code
>> GM.setDefaultPlotType(str);
\endcode
where <tt>str</tt> is either <tt>'flowfield'</tt>, <tt>'heatmap'</tt>, <tt>'histogram'</tt>, or <tt>'raster'</tt>.
This type will then apply to all subsequent plotting and recording commands, unless it is overwritten explicitly
with one of the method's input arguments.

This value can be overwritten by explicitly specifying a plot type when using the methods
<tt>plot</tt> (see \ref ch9s3s3_plot) or <tt>recordMovie</tt> (see \ref ch9s3s6_record_movie).

Plot type <tt>'flowfield'</tt> will plot a 2D vector field where the length of the vector is given as the firing
rsate of the neuron times the corresponding vector orientation. The latter is inferred from the third ::Grid3D
dimension, z. For example, Grid3D(10,10,4) plots a 10x10 vector flow field, assuming that neurons with z=0 code
for direction=0deg, z=1 corresponds to direction=90deg, z=2 is 180deg, and z=3 is 270deg.
Vectors with length smaller than 10% of the max in each frame are not shown.

Plot type <tt>'heatmap'</tt> will plot a topographical map of group activity (based on ::Grid3D) where hotter
colors mean higher firing rate.

Plot type <tt>'histogram'</tt> will plot a histogram of firing rates in the group.
The number of bins and whether to plot firing rates (Hz) instead of number of spikes can be set with options
<tt>'histNumBins'</tt> and <tt>'histShowRate'</tt> in method <tt>setPlottingAttributes</tt>.

Plot type <tt>'raster'</tt> will output the data as a raster plot with bin window <tt>binWindowMs</tt>.

\note Make sure the Grid3D dimensions are appropriate for the current plot type (change dimensions via
<tt>setGrid3D</tt>).
\since v3.0


\subsection ch9s3s5_plot_attributes 9.3.5 GroupMonitor Plotting Attributes

The method <tt>setPlottingAttributes(varargin)</tt> can be used to set default plotting attributes.
These default settings will apply to all activity plots, unless their values are overwritten explicitly in the
<tt>plot</tt> method (see \ref ch9s3s3_plot).

The following command sets the value of variable <tt>propertyName1</tt> to value <tt>value1</tt>:
\code
>> GM.setPlottingAttributes('propertyName1',value1);
\endcode
Additional variables can be flexibly appended; order or capitalization does not matter.
A list of available attributes can be displayed via:
\code
>> help GroupMonitor.setPlottingAttributes

GM.setPlottingAttributes(varargin) can be used to set default
settings that will apply to all activity plots.
This function provides control over additional attributes
that are not available as input arguments to GM.plot.
GM.setPlottingAttributes('propertyName1',value1,...) sets the
value of 'propertyName1' to value1.
 
Calling the function without input arguments will restore the
default settings.
 
BGCOLOR         - Set background color for figure. Must be of
                  type ColorSpec (char such as 'w','b','k' or
                  a 3-element vector for RGB channels).
                  Default: 'w'.
BINWINDOWMS     - The binning window (ms) in which the data
                  will be displayed. Default: 1000.
DISPFRAMENR     - A boolean flag that indicates whether to
                  display the frame number. Default: true.
FPS             - The frames per second for the plotting
                  loop. Default: 5.
HISTNUMBINS     - Number of bins for histogram. Default: 10.
HISTSHOWRATE    - A boolean flag to plot mean firing rates
                  (Hz) for plotType='histogram' instead of
                  mere number of spikes. Default: true.
INTERACTIVEMODE - A boolean flag to set InteractiveMode on or
                  off. If it is off, key events/FPS/stepping
                  will take no effect (helpful if you want to
                  take over control yourself). Default: true.
\endcode
\since v3.0


\subsection ch9s3s6_record_movie 9.3.6 Recording a Movie

Activity plots can be directly saved to AVI movie files via the following command:
\code
>> GM.recordMovie;
\endcode

This will generate a default GroupMonitor plot (see \ref ch9s3s3_plot) and save the frames to an <tt>.avi</tt>
binary using the MATLAB <tt>VideoWriter</tt> utility.

The following command will generate file called <tt>myMovie.avi</tt> that shows a heat map of group activity
with binning window 500 ms, and display the first, second, and eighth frame at a playback rate of 1 fps:
\code
>> GM.recordMovie('myMovie.avi', 'heatmap', [1 2 8], 500, 1);
created file "myMovie.avi"
\endcode

\note Make sure the Grid3D dimensions are appropriate for the current plot type (change dimensions via
<tt>setGrid3D</tt>).
\see \ref ch9s3s7_record_attributes
\since v3.0


\subsection ch9s3s7_record_attributes 9.3.7 GroupMonitor Recording Attributes

The method <tt>setRecordingAttributes(varargin)</tt> can be used to set default recording attributes.
These default settings will apply to all recordings, unless their values are overwritten explicitly in the
<tt>recordMovie</tt> method (see \ref ch9s3s6_record_movie).

The following command sets the value of variable <tt>propertyName1</tt> to value <tt>value1</tt>:
\code
>> GM.setRecordingAttributes('propertyName1',value1);
\endcode
Additional variables can be flexibly appended; order or capitalization does not matter.
A list of available attributes can be displayed via:
\code
>> help GroupMonitor.setRecordingAttributes

GM.setRecordingAttributes(varargin) can be used to set
default settings that will apply to all activity recordings.
This function provides control over additional attributes
that are not available as input arguments to GM.recordMovie.
GM.setRecordingAttributes('propertyName1',value1,...) sets
the value of 'propertyName1' to value1.
 
Calling the function without input arguments will restore the
default settings.
 
BGCOLOR        - Set background color for figure. Must be of
                 type ColorSpec (char such as 'w','b','k' or
                 a 3-element vector for RGB channels). The
                 default is white.
FILENAME       - File name where movie will be stored.
                 Currently the only supported file ending is
                 ".avi".
FPS            - The frames per second for the movie. The
                 default is 10.
WINSIZE        - A 2-element vector specifying the window
                 size of the video as width x height in
                 pixels.Set to [0 0] in order to
                 automatically make the movie window fit to
                 the size of the plot window.
\endcode
\since v3.0


\section ch9s4_connection_monitor 9.4 Connection Monitor
\author Michael Beyeler

A ConnectionMonitor can be used to monitor properties as well as the synaptic weights of a specific
connection in a network (specified via CARLsim::connect).
The monitor will assume that a corresponding weight file was created via ConnectionMonitor during
the CARLsim simulation.

The following methods are available:
\code
>> methods ConnectionMonitor

getConnectFileName        % returns the name of the connect file
getDefaultPlotType        % returns the default plot type for the group
getError                  % returns the current error status (flag and message)
getGrid3DPre              % returns the Grid3D dimensions of the pre-synaptic group
getGrid3DPost             % returns the Grid3D dimensions of the post-synaptic group
getNeuronLocation3DPre    % returns the 3D location of a neuron ID in the pre-synaptic group
getNeuronLocation3DPost   % returns the 3D location of a neuron ID in the post-synaptic group
getNumSnapshots           % returns the number of snapshots present in the connect file
getSnapshots              % returns the weight snapshots present in the connect file
hasValidSpikeFile         % returns a flag whether valid connect file was found
plot                      % plots data in current figure/axes
recordMovie               % records data from current figure/axes to AVI movie file
setConnectFileAttributes  % set prefix/suffix/separator of connect file naming template
setDefaultPlotType        % set default plot type of the connection (histogram, heat map, etc.)
setPlottingAttributes     % settings for customizing the plotting process
setRecordingAttributes    % settings for customizing the recording process (to AVI file)
\endcode

The following public members (properties) are available:
\code
>> properties ConnectionMonitor

connId                    % connection ID (same as in CARLsim::connect)
grpPreName                % name of pre-synaptic group
grpPostName               % name of post-synaptic group
errorMode                 % current error mode
resultsFolder             % path to results folder
supportedErrorModes       % list of supported error modes
supportedPlotTypes        % list of supported plot types
\endcode


\subsection ch9s4s1_create 9.4.1 Creating a ConnectionMonitor

In order to open a ConnectionMonitor, specify the name of the pre-synaptic and post-synaptic
group (given during a CARLsim simulation via CARLsim::createGroup or CARLsim::createSpikeGeneratorGroup)
and the directory in which the connect file resides
(<tt>results/</tt> by default):
\code
>> CM = ConnectionMonitor('input','output','results/');

CM = 

  ConnectionMonitor with properties:

                 connId: []
             grpPreName: 'input'
            grpPostName: 'output'
          resultsFolder: 'results'
              errorMode: 'standard'
    supportedErrorModes: {'standard'  'warning'  'silent'}
     supportedPlotTypes: {'heatmap'  'histogram'  'receptivefield'  'responsefield'}
\endcode
By default, this will look for a connect file named
<tt>conn_{pre-group name}_{post-group name}.dat</tt> in the <tt>results/</tt> directory,
which is the default name pattern for connect files created with CARLsim::setConnectionMonitor.
\since v3.0


\subsection ch9s4s2_setconnectfileattributes 9.4.2 Setting the Connect File Attributes

In case the connect file does not follow the default pattern, creating a ConnectionMonitor will result in the following
warning:
\code
>> CM = ConnectionMonitor('input,'output','results/');
Warning: Could not find valid connect file "results/conn_input_output.dat". Use
setConnectFileAttributes to set a proper connect file prefix/suffix/separator
\endcode
and trying to call the plot method will result in an error message:
\code
>> GM.plot
Error using ConnectionMonitor/throwError (line 1129)
Could not open file "results/conn_input_output.dat" with read permission
\endcode

In this case, the method <tt>setConnectFileAttributes</tt> can be used to change the default prefix, suffix, and
separator of the connect file name.
In the above case, the prefix would be <tt>conn_</tt>, the separator would be <tt>_</tt>, and the suffix would
be <tt>.dat</tt>. Note that only the "_" between group names counts as the separator.
Analogously, for a connect file following the naming convention
<tt>connect_{pre-group name}-{post-group name}.ext</tt> the prefix would be 
<tt>connect_</tt>, the separator would be <tt>-</tt>, and the suffix would be <tt>.ext</tt>.
After prefix/suffix/separator have been set accordingly, the connect file will be found and weights can be plotted:
\code
>> CM.hasValidConnectFile()

ans =

     0

>> CM.setSpikeFileAttributes('connect_','-','.ext');
>> CM.hasValidConnectFile()

ans =

     1

>> CM.plot
\endcode
\since v3.0


\subsection ch9s4s3_plot 9.4.3 Plotting Weights

Once a ConnectionMonitor has been set up, synaptic weights can be plotted using the <tt>plot</tt> method:
\code
>> CM.plot
\endcode
This will plot each weight snapshot (or frame) in the current figure/axes using a default plot type,
which is determined by the size of the weight matrix (see \ref ch9s4s4_plot_types).

A list of frames (or snapshots) and neurons to be plotted can be specified directly.
For example, the following command would display the first, second, and eighth weight snapshot as a 2D heat map:
\code
>> CM.plot('heatmap',[1 2 8]);
\endcode

Every Monitor comes with an InteractiveMode for plotting activity and weights.
By default, plotting will occur at a predefined speed (5 frames per second), unless otherwise specified using the
method <tt>setPlottingAttributes</tt> (see \ref ch9s4s5_plot_attributes).
At any time, the user can hit key 'p' to pause plotting, or 'q' to quit.
Hitting key 's' will enter stepping mode, which will freeze the current frame until the user either hits the
'right arrow' key (in order to step one frame forward) or the 'left arrow' key (in order to step one frame backward).

It is also possible to set the default plot type directly, so it does not have to be specified each
time data is plotted or recorded:
\code
>> CM.setDefaultPlotType('histogram')
\endcode
For a list of available plot types, please refer to \ref ch9s4s4_plot_types.

A number of additional plotting attributes can be set via <tt>setPlottingAttributes</tt>, such as the
background color of the figure and the number of frames to be displayed per second
(see \ref ch9s4s5_plot_attributes).

It is also possible to display weight data only for a subset of pre-synaptic or post-synaptic neurons.
This makes it possible to visualize the receptive field of a post-synaptic neuron, or the response field
of a pre-synaptic neuron.

The raw data of a connect file can also be read directly using a ConnectionReader (see \ref ch9s5s3_connection_reader).
\see \ref ch9s4s4_plot_types
\see \ref ch9s4s5_plot_attributes
\see \ref ch9s5s3_connection_reader
\since v3.0


\subsection ch9s4s4_plot_types 9.4.4 ConnectionMonitor Plot Types

The following image illustrates the different plot types that are available (applied to the small "Hello World"
network, which consists of 13x9 neurons projecting to 3x3 neurons with Gaussian connectivity):

\image html 9_cm_plottypes.jpg "Supported ConnectionMonitor plot types: 'heatmap', 'histogram', 'receptivefield', and 'responsefield'."

A specific default plot type can be set using <tt>setDefaultPlotType</tt>:
\code
>> CM.setDefaultPlotType(str);
\endcode
where <tt>str</tt> is either <tt>'heatmap'</tt>, <tt>'histogram'</tt>, <tt>'receptivefield'</tt>, or <tt>'responsefield'</tt>.
This type will then apply to all subsequent plotting and recording commands, unless it is overwritten explicitly
with one of the method's input arguments.

This value can be overwritten by explicitly specifying a plot type when using the methods
<tt>plot</tt> (see \ref ch9s4s3_plot) or <tt>recordMovie</tt> (see \ref ch9s4s6_record_movie).

Plot type <tt>'heatmap'</tt> will plot a 2D weight matrix where the first dimension corresponds to the number of
neurons in the pre-synaptic group (labeled <tt>nrPre</tt> in the image above),
and the second dimension corresponds to the number of neurons in the post-synaptic group (labeled <tt>nrPost</tt>
in the image above).

Plot type <tt>'histogram'</tt> will plot a histogram of all weight values in the connection.

Plot type <tt>'receptivefield'</tt> will plot the spatial receptive field of post-synaptic neurons (looking back
on all connected pre-synaptic neurons). By default, the receptive field of all neurons will be shown.
An additional argument to <tt>plot</tt> allows to specify a list of neurons for which to show the receptive field.
For example, the receptive field in the above image (third panel) was generated with:
\code
CM.plot('receptivefield',1,5); % plotType, frames, neurons
\endcode
shown for the first frame and the fifth neuron in the post-synaptic group (which is located at (0,0,0)).

Plot type <tt>'responsefield'</tt> will plot the spatial response field of pre-synaptic neurons (looking forward
on all connected post-synaptic neurons). By default, the response field of all neurons will be shown.
An additional argument to <tt>plot</tt> allows to specify a list of neurons for which to show the response field.
For example, the response field in the above image (fourth panel) was generated with:
\code
CM.plot('responsefield',1,59); % plotType, frames, neurons
\endcode
shown for the first frame and the 59th neuron in the pre-synaptic group (which is located at (0,0,0)).

\since v3.0


\subsection ch9s4s5_plot_attributes 9.4.5 ConnectionMonitor Plotting Attributes

The method <tt>setPlottingAttributes(varargin)</tt> can be used to set default plotting attributes.
These default settings will apply to all activity plots, unless their values are overwritten explicitly in the
<tt>plot</tt> method (see \ref ch9s4s3_plot).

The following command sets the value of variable <tt>propertyName1</tt> to value <tt>value1</tt>:
\code
>> CM.setPlottingAttributes('propertyName1',value1);
\endcode
Additional variables can be flexibly appended; order or capitalization does not matter.
A list of available attributes can be displayed via:
\code
>> help ConnectionMonitor.setPlottingAttributes

CM.setPlottingAttributes(varargin) can be used to set default
settings that will apply to all activity plots.
This function provides control over additional attributes
that are not available as input arguments to CM.plot or
CM.plotFrame.
CM.setPlottingAttributes('propertyName1',value1,...) sets the
value of 'propertyName1' to value1.
 
Calling the function without input arguments will restore the
default settings.
 
BGCOLOR         - Set background color for figure. Must be of
                  type ColorSpec (char such as 'w','b','k' or
                  a 3-element vector for RGB channels).
                  Default: 'w'.
BINWINDOWMS     - The binning window (ms) in which the data
                  will be displayed. Default: 1000.
DISPFRAMENR     - A boolean flag that indicates whether to
                  display the frame number. Default: true.
FPS             - The frames per second for the plotting
                  loop. Default: 5.
HISTNUMBINS     - Number of bins for histogram. Default: 20.
INTERACTIVEMODE - A boolean flag to set InteractiveMode on or
                  off. If it is off, key events/FPS/stepping
                  will take no effect (helpful if you want to
                  take over control yourself). Default: true.
\endcode
\since v3.0


\subsection ch9s4s6_record_movie 9.4.6 Recording a Movie

Activity plots can be directly saved to AVI movie files via the following command:
\code
>> CM.recordMovie;
\endcode

This will generate a default ConnectionMonitor plot (see \ref ch9s4s3_plot) and save the frames to an <tt>.avi</tt>
binary using the MATLAB <tt>VideoWriter</tt> utility.

The following command will generate file called <tt>myMovie.avi</tt> that shows a heat map of the weight matrix,
and display the first, second, and eighth frame (or snapshot) at a playback rate of 1 fps:
\code
>> CM.recordMovie('myMovie.avi', 'heatmap', [1 2 8], 1);
created file "myMovie.avi"
\endcode

\see \ref ch9s4s7_record_attributes
\since v3.0


\subsection ch9s4s7_record_attributes 9.4.7 ConnectionMonitor Recording Attributes

The method <tt>setRecordingAttributes(varargin)</tt> can be used to set default recording attributes.
These default settings will apply to all recordings, unless their values are overwritten explicitly in the
<tt>recordMovie</tt> method (see \ref ch9s4s6_record_movie).

The following command sets the value of variable <tt>propertyName1</tt> to value <tt>value1</tt>:
\code
>> CM.setRecordingAttributes('propertyName1',value1);
\endcode
Additional variables can be flexibly appended; order or capitalization does not matter.
A list of available attributes can be displayed via:
\code
>> help ConnectionMonitor.setRecordingAttributes
CM.setRecordingAttributes(varargin) can be used to set
default settings that will apply to all activity recordings.
This function provides control over additional attributes
that are not available as input arguments to CM.recordMovie.
CM.setRecordingAttributes('propertyName1',value1,...) sets
 
Calling the function without input arguments will restore the
default settings.
 
BGCOLOR        - Set background color for figure. Must be of
                 type ColorSpec (char such as 'w','b','k' or
                 a 3-element vector for RGB channels). The
                 default is white.
FILENAME       - File name where movie will be stored.
                 Currently the only supported file ending is
                 ".avi".
FPS            - The frames per second for the movie. The
                 default is 10.
WINSIZE        - A 2-element vector specifying the window
                 size of the video as width x height in
                 pixels.Set to [0 0] in order to
                 automatically make the movie window fit to
                 the size of the plot window.
\endcode
\since v3.0



\section ch9s5_reading_raw_data 9.5 Reading Raw Data
\author Michael Beyeler

Although the OAT provides a variety of functions to simplify the visualization and analysis of network activity
or topology, there might be cases in which the user might like to have complete control over the process.
Therefore, CARLsim also provides a means to directly read the simulation, spike, and weight file binaries
generated during a simulation.


\subsection ch9s5s1_simulation_reader 9.5.1 Simulation Reader

A SimulationReader can be used to read a simulation log file that is created by default by every CARLsim
simulation, or by explicitly calling CARLsim::saveSimulation.
This allows to directly access important properties of the simulation run or the spiking network, without
the need of a NetworkMonitor.

The following public members (properties) are available:
\code
>> properties SimulationReader

fileStr              % path to simulation file
sim                  % struct containing viable simulation/network information
groups               % struct containing all group info
syn_preIDs           % pre-synaptic ID for every synapse in the network
syn_postIDs          % post-synaptic ID for every synapse in the network
syn_weights          % weight value for every synapse in the network
syn_maxWeights       % max weight value for every synapse in the network
syn_plastic          % type for every synapse in the network
syn_delays           % delay value for every synapse in the network
\endcode

The following code snippet points a SimulationReader to a simulation file <tt>results/sim_myNet.dat</tt>
and populates the public member structs <tt>sim</tt> and <tt>groups</tt> with viable simulation/network information:
\code
>> SimR = SimulationReader('results/sim_myNet.dat');
\endcode

The <tt>sim</tt> struct can then be queried for values such as simulation time or execution time:
\code
>> SimR.sim.simTimeSec      % print simulation time (sec)
>> SimR.sim.exeTimeSec      % print execution time (sec)
>> SimR.sim.nGroups         % print number of groups in network
>> SimR.sim.nNeurons        % print number of neurons in network
>> % etc.
\endcode

The <tt>groups</tt> struct can then be queried for values such as the Grid3D dimensions or neuron IDs:
\code
>> SimR.groups(1).sizeN        % print number of neurons in first group
>> SimR.groups(1).startN       % print ID of first neuron in first group
>> SimR.groups(1).grid3D       % print Grid3D dimensions of first group
>> % etc.
\endcode

By default, the deprecated <tt>syn_*</tt> properties will not be populated by the constructor call.
In order to access these properties, the constructor needs to be called with an additional flag
<tt>loadSynapseInfo</tt>:
\code
>> SimR = SimulationReader('results/sim_myNet.dat',true);
\endcode
Note that for this to work, the simulation must have been saved with CARLsim::saveSimulation input
argument <tt>saveSynapseInfo</tt> set to true.

\note Use of the <tt>syn_*</tt> properties above is deprecated. Use ConnectionMonitor or ConnectionReader 
to access synapse information instead.
\since v3.0


\subsection ch9s5s2_spike_reader 9.5.2 Spike Reader

A SpikeReader can be used to read raw spike file data that was generated with the SpikeMonitor
utility in CARLsim.
This allows to directly access the spike data, be it in AER format or binned in suitable time windows,
without the need of a GroupMonitor or NetworkMonitor.

The following methods are available:
\code
>> methods SpikeReader

getError               % returns the current error status (flag and message)
getGrid3D              % returns the Grid3D dimensions of the group
getSimDurMs            % returns the estimated simulation duration (ms)
readSpikes             % reads spike files and returns data binned or in AER format
\endcode

The following public members (properties) are available:
\code
>> properties SpikeReader

fileStr                % path to spike file
errorMode              % current error mode
supportedErrorModes    % list of supported error modes
\endcode

The following code snippet points a SpikeReader object to a spike file
<tt>results/spk_group1.dat</tt> (generated with the SpikeMonitor utility in CARLsim)
and returns the spike data binned into 100 ms time windows:
\code
>> SR = SpikeReader('results/spk_group1.dat');
>> spkData = SR.readSpikes(100); % binWindowMs
\endcode

The variable <tt>spkData</tt> will return spike data in a 2D matrix, where the first dimension
corresponds to the bin windows and the second dimension corresponds to the number of neurons
in the group (1-indexed).
For example, with a binning window of 100ms, <tt>spkData(1,1)</tt> would contain the number of
spikes that the first neuron in the group emitted in the first 100ms (t = 0 .. 99ms) of the simulation.

Alternatively, spike data can be returned in AER format (as <tt>[times;neurIds]</tt>) if the
<tt>binWindowMs</tt> input argument to <tt>readSpikes</tt> is set to -1:
\code
>> SR = SpikeReader('results/spk_group1.dat');
>> spkData = SR.readSpikes(-1); % binWindowMs
\endcode 

The generation of a raster plot is then as easy as:
\code
>> plot(spkData(1,:), spkData(2,:), '.k');
>> xlabel('time (ms)')
>> ylabel('neuron ID')
\endcode

The SpikeReader can also be queried for an estimate about the total simulation duration via:
\code
>> simDur = SR.getSimDurMs();
\endcode
Note that this is only an estimate, based on the last spike time in the group.
Other than that, a SpikeReader object does not know about any simulation procedures.
\since v3.0


\subsection ch9s5s3_connection_reader 9.5.3 Connection Reader

A ConnectionReader can be used to read raw connection file data that was generated with the
ConnectionMonitor utility in CARLsim.
This allows to directly access the weight data, at specific times, without the need of a 
ConnectionMonitor.

The following methods are available:
\code
>> methods ConnectionReader

getError               % returns the current error status (flag and message)
getGrid3DPre           % returns the Grid3D dimensions of the pre-synaptic group
getGrid3DPost          % returns the Grid3D dimensions of the post-synaptic group
getNumNeuronsPre       % returns the number of neurons in the pre-synaptic group
getNumNeuronsPost      % returns the number of neurons in the post-synaptic group
getNumSnapshots        % returns the number of snapshots in the connection file
readWeights            % returns the weights of a connection at specific simulation times
\endcode

The following public members (properties) are available:
\code
>> properties ConnectionReader

fileStr                % path to connection file
errorMode              % current error mode
supportedErrorModes    % list of supported error modes
\endcode

The following code snippet points a ConnectionReader object to a connection file
<tt>results/conn_group1_group2.dat</tt> (generated with the ConnectionMonitor utility in CARLsim)
and returns the weight data for all recorded snapshots:
\code
>> CR = ConnectionReader('results/conn_group1_group2.dat');
>> [allTimestamps, allWeights] = CR.readWeights();
\endcode
The variable <tt>allTimestamps</tt> will contain a list of timestamps (ms) at which the corresponding
weights were recorded.
The variable <tt>allWeights</tt> will return the weight data in a 2D matrix, where the first dimension
specifies the snapshot number and the second dimension corresponds to all synaptic weights for that
specific snapshot.
For example, <tt>allWeights(1,:)</tt> would contain all synaptic weights recorded during the first snapshot.
The timestamp of the first snapshot can be retrieved via <tt>allTimestamps(1)</tt>.

Plotting a histogram of all weights is then as easy as:
\code
>> hist(allWeights(1,:));
>> xlabel('weight value')
>> ylabel('number of occurrences')
\endcode

Alternatively, the weight vector can be reshaped as a 2D weight matrix according to the population dimensions
and plotted as a heatmap:
\code
>> imagesc( reshape(allWeights(1,:), CR.getNumNeuronsPost(), CR.getNumNeuronsPre()) );
>> xlabel('nrPre')
>> ylabel('nrPost')
\endcode
\since v3.0


\section ch9s6_migrating_scripts 9.6 Migrating from CARLsim 2.2
\author Michael Beyeler

Please note that the following scripts from CARLsim 2.2 (from former directory <tt>scripts/common/</tt>) are no
longer available:
- <tt>readFramesFromRgbFile.m</tt>: replaced with VisualStimulus Toolbox (see \ref ch6s3_visual_stimulus_toolbox)
- <tt>readNetwork.m</tt>: replaced with NetworkMonitors (see \ref ch9s2_network_monitor)
- <tt>readSpikes.m</tt>: replaced with Spike Readers (see \ref ch9s5s2_spike_reader)
- <tt>readSpikesAERtoFull.m</tt>: no longer available
- <tt>writeFramesToRgbFile.m</tt>: replaced with VisualStimulus Toolbox (see \ref ch6s3_visual_stimulus_toolbox)

*/