from __future__ import print_function
import re
import math
import string
import operator
import time
import sys
import random as rn
import os


#config
networkType = 'MESH'
flitSize = 32
# Global variables
#local path
localPath = os.path.dirname(os.path.abspath(__file__))

spikeMap = {}
connectionMap = {}
# group to group mapping -> Key is the source group, value is a list of destination groups.
clusterClusterMap = {}
# cluster to node mapping using the optimization algorithm.
clusterNodeMap = {}
# group to spike mapping -> Map the spike times generated by a group only if the spikes are sent to another group
# internal spikes are ignored
groupSpikeMap = {}
# list to store in individual clusters IDs
clusters = []

itr = 0 
ISI = 0
spikeDisorder = 0

def numberOfSpikes(srcNeuron, destNeuron): 
    # find the number of spikes communicated between two neurons.
    # the 2 neurons cannot belong to the same crossbar. 
    if srcNeuron in connectionMap:
        spikes = 0
        for i in connectionMap[srcNeuron]:
            if int(i) == destNeuron:
                if srcNeuron in spikeMap:
                    spikes = len(spikeMap[srcNeuron])
                    break
                else:
                    spikes = 0
            else:
                spikes = 0
    else:
        spikes = 0
    
    return spikes


def generateGroupInfo(logFile):
    # Trigger Noxim with the generated traffic and connectionTable, the node mapping is still one to one.  
    for sourceGroup in clusterClusterMap:
        numConnection = len(clusterClusterMap[sourceGroup])
        logFile.write('%s %s\n' %(sourceGroup, numConnection))
        for destinationGroup in clusterClusterMap[sourceGroup]:
            logFile.write('%s ' %(destinationGroup))
        logFile.write('\n')

def generateSpikeInfo(logFile):
    # Trigger Noxim with the generated traffic and connectionTable, the node mapping is still one to one.  
    
    for sourceNeuron in groupSpikeMap:
        numSpikes = len(groupSpikeMap[sourceNeuron])
        for spike in groupSpikeMap[sourceNeuron]:
            logFile.write('%s %s\n' % (spike, sourceNeuron))

def readInfo(logFileLines): 
    for line in logFileLines: 
        line_array = line.strip().split()
        sourceCluster = int(line_array[0])
        destinationCluster = int(line_array[1])
        spikes = line_array[2:-1]
        
        # update the group group map
        if sourceCluster in clusterClusterMap.keys():
            clusterClusterMap[sourceCluster].append(destinationCluster)
        else:
            clusterClusterMap[sourceCluster] = [destinationCluster]

        # update the group spike map
        if sourceCluster not in groupSpikeMap.keys():
            groupSpikeMap[sourceCluster] = spikes
        
        #update the cluster list with the unique cluster IDs.
        # source clusters
        if sourceCluster not in clusters:
            clusters.append(int(sourceCluster))
    
        # destination clusters
        if destinationCluster not in clusters:
            clusters.append(int(destinationCluster))


def generateNodeMappingInfo(onmp, clusters, numNodes):

    assignedNode = []
    nodes = [i for i in range(numNodes)]
    clusters = list(set(clusters))
    for cluster in clusters:
        nodeID = rn.randint(0, len(nodes)-1) 
        clusterNodeMap[cluster] = nodes[nodeID]
        nodes.pop(nodeID)
        if len(nodes) == 0:
            break
    
    for cluster in clusterNodeMap:
        onmfp.write('%d %d\n' %(cluster, clusterNodeMap[cluster]))
    
    onmfp.close()

def generateNoximConfigFile(octfp, ocfp): 
    for line in octfp:
        ocfp.write(line)

    # input the network type
    ocfp.write('network_type: '+'"'+networkType+'"'+'\n')
    ocfp.write('dim_x: '+str(dimX)+'\n')
    ocfp.write('dim_y: '+str(dimY)+'\n')
    ocfp.write('flit_size: '+str(flitSize)+'\n')
    ocfp.write('routing_algorithm: XY\n')
    ocfp.write('traffic_filename: "'+localPath+'/traffic.txt"\n')
    ocfp.write('neuron_node_filename: "'+localPath+'/node_mapping.txt"\n')
    ocfp.write('neural_network_filename: "'+localPath+'/connection_table.txt\"\n')
    ocfp.write('cluster_traffic: false\n')

    ocfp.close()

# checks to see if two neurons are connected in a design
def isConnected(srcNeuron, destNeuron):
    if srcNeuron in connectionMap:
        if destNeuron in connectionMap[srcNeuron]:
            return 1
        else: 
            return 0
    else:
        return 0

def testFormat(argv):

    inputfile = ''
    outputfile = ''

    if len(argv) > 1:
        if argv[1] == '-h':
            print('placer.py <inputfile> <outputFilePath>')
            sys.exit()

    if(len(argv) != 5):
        print('Input format is ---> python<v> placer.py <inputfile> <outputfilePath> <dimX> <dimY>')
        sys.exit(2)

    else:
        inputfile = argv[1]
        outputfile = argv[2]
        dimX = int(argv[3])
        dimY = int(argv[4])


    print('Input file is "', inputfile)
    print('Output file is "', outputfile)
    return inputfile, outputfile, dimX, dimY



###################################################################################################################

######################################## MAIN FUNCTION ###########################################################

###################################################################################################################

if __name__ == "__main__":
    inputFile, outputFilePath, dimX, dimY = testFormat(sys.argv)

    logFile = open(inputFile, 'r')
    logFileLine = logFile.readlines()
    readInfo(logFileLine)
    logFile.close()
    print("STATUS: Partition information Read.")

    osfname = outputFilePath+'traffic.txt'
    osfp = open(osfname,'w')
    generateSpikeInfo(osfp)
    print("STATUS: Traffic File Created.")

    ocfname = outputFilePath+'connection_table.txt'
    ocfp = open(ocfname,'w')
    generateGroupInfo(ocfp)
    print("STATUS: Cluster to Cluster connection table generated.")

    onmfname = outputFilePath+'node_mapping.txt'
    onmfp = open(onmfname, 'w')

    generateNodeMappingInfo(onmfp, clusters, dimX*dimY)
    print("STATUS: Node to node mapping table generated.")

    configTemplate = 'config.yaml.tmpl'
    configFile = '../../snnNoxim/bin/config.yaml'
    octfp = open(configTemplate, 'r')
    ocfp = open(configFile, 'w')
    generateNoximConfigFile(octfp, ocfp)
    print("STATUS: Noxim configuration file generated.")
